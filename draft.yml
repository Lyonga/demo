resource "aws_ssm_document" "install_agents" {
  name          = "NglSecurityAgentInstallationDocument"
  document_type = "Automation"

  content = jsonencode({
    schemaVersion = "0.3"
    description   = "Install security agents on EC2 instances."
    parameters    = {
      InstanceIds = {
        type        = "StringList"
        description = "List of EC2 Instance IDs."
      }
      S3BucketName = {
        type        = "String"
        description = "S3 bucket containing the installers."
        default     = var.bucket_name
      }
      Region = {
        type    = "String"
        default = data.aws_region.current.name
      }
      CrowdStrikeCID = {
        type        = "String"
        description = "CrowdStrike CID for sensor installation"
      }
    }
    mainSteps = [
      # Other steps omitted for brevity, e.g. DownloadAWSCLI
      {
        name   = "InstallCrowdStrike"
        action = "aws:runCommand"
        inputs = {
          DocumentName = "AWS-RunPowerShellScript"
          InstanceIds  = "{{ InstanceIds }}"
          Parameters   = {
            commands = [
              "$installer = \"C:\\Scripts\\FalconSensor.exe\"",
              "aws s3 cp s3://{{ S3BucketName }}/FalconSensor.exe $installer",
              "Start-Process $installer -ArgumentList \"--cid={{ CrowdStrikeCID }}\" -Wait"
            ]
          }
        }
      },
      # ...
    ]
  })
}




resource "aws_instance" "generic" {
  ami               = aws_launch_template.ec2_instance_launch_template.image_id
  instance_type     = aws_launch_template.ec2_instance_launch_template.instance_type
  subnet_id         = var.vpc_ec2_subnet1
  key_name          = aws_launch_template.ec2_instance_launch_template.key_name

  # Attach the same security group that allows WinRM
  vpc_security_group_ids = [
    aws_security_group.winrm_sg.id
  ]

  # If you're using a launch template, reference it here
  launch_template {
    id      = aws_launch_template.ec2_instance_launch_template.id
    version = aws_launch_template.ec2_instance_launch_template.latest_version
  }

  # We need to connect via WinRM
  connection {
    type     = "winrm"
    host     = self.public_ip  # or self.private_ip if your TF runner is in the same VPC
    user     = "Administrator" # or your admin username
    password = var.win_password # best practice: from a secure source
  }

  # The actual provisioning steps
  provisioner "remote-exec" {
    inline = [
      # 1) Make a temp directory, download AWS CLI MSI
      "powershell.exe mkdir C:\\Temp -ErrorAction SilentlyContinue",
      "powershell.exe Invoke-WebRequest -Uri https://awscli.amazonaws.com/AWSCLIV2.msi -OutFile C:\\Temp\\AWSCLIV2.msi",

      # 2) Install AWS CLI silently
      "powershell.exe Start-Process msiexec -ArgumentList '/i C:\\Temp\\AWSCLIV2.msi /quiet /norestart' -Wait",

      # 3) Add AWS CLI path to environment variable (optional)
      "powershell.exe $awsCliPath = 'C:\\Program Files\\Amazon\\AWSCLIV2'; [Environment]::SetEnvironmentVariable('PATH', $env:PATH + ';' + $awsCliPath, [EnvironmentVariableTarget]::Machine)",

      # 4) Download + Install CrowdStrike from S3 (using the newly installed AWS CLI)
      #    Make sure your instance has IAM perms for s3:GetObject, or use presigned URL
      "powershell.exe mkdir C:\\Scripts -ErrorAction SilentlyContinue",
      "powershell.exe aws s3 cp s3://my-bucket/FalconSensor.exe C:\\Scripts\\FalconSensor.exe",
      "powershell.exe Start-Process C:\\Scripts\\FalconSensor.exe -Wait",

      # If you need a CID argument:
      # "powershell.exe Start-Process C:\\Scripts\\FalconSensor.exe -ArgumentList '--cid=ABCD1234' -Wait",

      # 5) Download + Install Rapid7 agent from S3
      "powershell.exe aws s3 cp s3://my-bucket/RAPID7_X86_64.MSI C:\\Scripts\\RAPID7_X86_64.MSI",
      "powershell.exe Start-Process msiexec -ArgumentList '/i C:\\Scripts\\RAPID7_X86_64.MSI /quiet /norestart' -Wait",

      # 6) Download + Install Duo from S3
      "powershell.exe aws s3 cp s3://my-bucket/DUOWINDOWSLO6OG4.MSI C:\\Scripts\\DUOWINDOWSLO6OG4.MSI",
      "powershell.exe Start-Process msiexec -ArgumentList '/i C:\\Scripts\\DUOWINDOWSLO6OG4.MSI /quiet /norestart' -Wait",
    ]
  }

  tags = {
    Name       = "win-instance-with-provisioners"
    DomainJoin = "true"
  }
}








resource "aws_launch_template" "windows_lt" {
  name                  = "windows-lt"
  image_id              = var.windows_ami
  instance_type         = var.instance_type
  # additional fields as needed (key_name, etc.)

  # This user_data uses PowerShell to:
  # 1) Download & install AWS CLI
  # 2) Use the newly installed AWS CLI to copy .exe/.msi installers from S3
  # 3) Install CrowdStrike, Rapid7, Duo
  user_data = base64encode(<<-POWERSHELL
    <powershell>

    # --- 1) Download & Install AWS CLI (Windows) ---
    Write-Host "Downloading AWS CLI .msi..."
    New-Item -ItemType Directory -Path C:\\Temp -Force | Out-Null
    Invoke-WebRequest -Uri "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "C:\\Temp\\AWSCLIV2.msi"
    Write-Host "Installing AWS CLI..."
    Start-Process msiexec -ArgumentList "/i C:\\Temp\\AWSCLIV2.msi /quiet /norestart" -Wait

    # Optionally update PATH environment so AWS CLI is immediately usable in the same session
    $awsCliPath = "C:\\Program Files\\Amazon\\AWSCLIV2"
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH + ';' + $awsCliPath, [EnvironmentVariableTarget]::Machine)

    # --- 2) Install CrowdStrike (Example: FalconSensor.exe) ---
    Write-Host "Installing CrowdStrike sensor..."
    New-Item -ItemType Directory -Path "C:\\Scripts" -Force | Out-Null
    aws s3 cp s3://my-bucket/FalconSensor.exe C:\\Scripts\\FalconSensor.exe
    # If you need a CID token, add --cid=XYZ in the argument list:
    Start-Process "C:\\Scripts\\FalconSensor.exe" -Wait
    # Example with argument:
    # Start-Process "C:\\Scripts\\FalconSensor.exe" -ArgumentList "--cid=ABCD1234" -Wait

    # --- 3) Install Rapid7 (Example: RAPID7_X86_64.MSI) ---
    Write-Host "Installing Rapid7..."
    aws s3 cp s3://my-bucket/RAPID7_X86_64.MSI C:\\Scripts\\RAPID7_X86_64.MSI
    Start-Process msiexec -ArgumentList "/i C:\\Scripts\\RAPID7_X86_64.MSI /quiet /norestart" -Wait

    # --- 4) Install Duo (Example: DUOWINDOWSLO6OG4.MSI) ---
    Write-Host "Installing Duo agent..."
    aws s3 cp s3://my-bucket/DUOWINDOWSLO6OG4.MSI C:\\Scripts\\DUOWINDOWSLO6OG4.MSI
    Start-Process msiexec -ArgumentList "/i C:\\Scripts\\DUOWINDOWSLO6OG4.MSI /quiet /norestart" -Wait

    Write-Host "All agent installations complete!"

    # Add any additional setup or logging
    Start-Sleep -Seconds 5
    </powershell>
  POWERSHELL
  )

  # Example block device mapping
  block_device_mappings {
    device_name = "/dev/sda1"
    ebs {
      volume_size           = 30
      volume_type           = "gp3"
      delete_on_termination = true
    }
  }

  # Tag specifications if desired
  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = "WindowsLT-with-AgentInstalls"
    }
  }

  # metadata_options, etc. as needed
}


