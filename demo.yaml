{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "CodeArtifactReadOnly": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Allows DeploymentUser in all accounts to read from CodeArtifact",
        "RoleName": "codeartifact-read-only",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::384352530920:user/DeploymentUser",
                  "arn:aws:iam::384352530920:role/cicd-deployment-role",
                  "arn:aws:iam::454229460814:user/DeploymentUser",
                  "arn:aws:iam::454229460814:role/cicd-deployment-role",
                  "arn:aws:iam::235163852221:user/DeploymentUser",
                  "arn:aws:iam::235163852221:role/cicd-deployment-role"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "codeartifact",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "codeartifact:Describe*",
                    "codeartifact:Get*",
                    "codeartifact:List*",
                    "codeartifact:ReadFromRepository"
                  ],
                  "Resource": [
                    "arn:aws:codeartifact:*:85924544718:repository/*/*",
                    "arn:aws:codeartifact:*:85924544718:package/*/*/*/*/*",
                    "arn:aws:codeartifact:*:85924544718:domain/*",
                    "arn:aws:codeartifact:*:384352530920:repository/*/*",
                    "arn:aws:codeartifact:*:384352530920:package/*/*/*/*/*",
                    "arn:aws:codeartifact:*:384352530920:domain/*",
                    "arn:aws:codeartifact:*:454229460814:repository/*/*",
                    "arn:aws:codeartifact:*:454229460814:package/*/*/*/*/*",
                    "arn:aws:codeartifact:*:454229460814:domain/*",
                    "arn:aws:codeartifact:*:235163852221:repository/*/*",
                    "arn:aws:codeartifact:*:235163852221:package/*/*/*/*/*",
                    "arn:aws:codeartifact:*:235163852221:domain/*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "sts-assume-role",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:GetServiceBearerToken"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F3",
              "reason": "This role has read-only access, and needs to access all repositories and packages in CodeArtifact"
            }
          ]
        }
      }
    },
    "PolicyPdfBucketKeyV1": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for uploaded policy pdfs",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "policy-pdf-bucket-policyv1",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::163854895360:root"
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": [
                    "policy-api",
                    "policy-pdf-generator",
                    "policy-xml-generator"
                  ]
                }
              }
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/${AWS::Region}/AWSReservedSSO_AWSAdministratorAccess_763d3671c6666008"
                  }
                ]
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "PolicyPdfBucketKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/policy-pdf-bucket-key",
        "TargetKeyId": {
          "Ref": "PolicyPdfBucketKeyV1"
        }
      }
    },
    "ID3BucketKeyV1": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for ID3 Bucket",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "id3-bucket-key-policyv1",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Data Role to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DataRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "DataUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "ID3BucketKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/id3-bucket-key",
        "TargetKeyId": {
          "Ref": "ID3BucketKeyV1"
        }
      }
    },
    "LifeProBucketKeyV1": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for LifePro Bucket",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "lifepro-bucket-key-policyv1",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Data Role to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DataRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "DataUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "LifeProBucketKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/lifepro-bucket-key",
        "TargetKeyId": {
          "Ref": "LifeProBucketKeyV1"
        }
      }
    },
    "OnBaseBucketKeyV1": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for OnBase Bucket",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "onbase-bucket-key-policyv1",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Data Role to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DataRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "DataUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "OnBaseBucketKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/onbase-bucket-key",
        "TargetKeyId": {
          "Ref": "OnBaseBucketKeyV1"
        }
      }
    },
    "ReplicationClusterKeyV1": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for Replication Aurora Cluster",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "replication-cluster-key-policyv1",
          "Statement": [
            {
              "Sid": "Enable the cdc processor service access to its own key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ListAliases",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": [
                    "cdc-event-processor"
                  ]
                }
              }
            },
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable the rds proxy role access to this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": [
                    "rds-proxy"
                  ]
                }
              }
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::163854895360:root"
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": [
                    "policy-api",
                    "policy-pdf-generator",
                    "policy-xml-generator"
                  ]
                }
              }
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/Service-Name": [
                    "agent-api",
                    "onbase-audit-service"
                  ]
                }
              }
            },
            {
              "Sid": "Allow SecretsManager Password Rotation Lambda Access",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/infrastructure-workloads-dev-us-east-2-lambdaRole"
                }
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Data Role to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DataRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "DataUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "ReplicationClusterKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/replication-cluster-key",
        "TargetKeyId": {
          "Ref": "ReplicationClusterKeyV1"
        }
      }
    },
    "RedshiftKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for Redshift Cluster",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "redshift-key-policy",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Data Role to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DataRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "DataUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": [
                    "etl-pipelines"
                  ]
                }
              }
            },
            {
              "Sid": "DataFeedTFAccess",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DstDataServiceTFUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Fn::If": [
                "NonQAEnvironment",
                {
                  "Sid": "DataFeedGlueAccess",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": {
                      "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/ngl/dst/dev-datafeed-data_generator_glue_role"
                    }
                  },
                  "Action": [
                    "kms:RetireGrant",
                    "kms:CreateGrant",
                    "kms:Decrypt",
                    "kms:Describe",
                    "kms:DescribeKey",
                    "kms:Encrypt",
                    "kms:GenerateDataKey*",
                    "kms:ReEncrypt*"
                  ],
                  "Resource": "*"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Fn::If": [
                "NonQAEnvironment",
                {
                  "Sid": "JiraAnalyticsGlueAccess",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": {
                      "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/ngl/dst/dev-jira-analytics-jira_analytics_glue_role"
                    }
                  },
                  "Action": [
                    "kms:RetireGrant",
                    "kms:CreateGrant",
                    "kms:Decrypt",
                    "kms:Describe",
                    "kms:DescribeKey",
                    "kms:Encrypt",
                    "kms:GenerateDataKey*",
                    "kms:ReEncrypt*"
                  ],
                  "Resource": "*"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Sid": "JiraAnalyticsTFAccess",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DstJiraAnalyticsTFUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "RedshiftKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/redshift-key",
        "TargetKeyId": {
          "Ref": "RedshiftKey"
        }
      }
    },
    "ETLPipelinesKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for encrypting data on ETL Pipelines (predominantly glue based)",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "etl-pipelines-key-policy",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Data Role to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DataRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "DataUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "ETLPipelinesKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/etl-pipelines-key",
        "TargetKeyId": {
          "Ref": "ETLPipelinesKey"
        }
      }
    },
    "DeadLetterQueueKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for dead letter queue",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "dead-letter-queue-key-policy",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/${AWS::Region}/AWSReservedSSO_AWSAdministratorAccess_763d3671c6666008"
                  }
                ]
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": "dead-letter-queue-processor"
                }
              }
            },
            {
              "Sid": "Allow access for key administrators/backups",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_NGL-Database-Administrator_eee1d98d72e43fea",
                  {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/svcCommVaultDb"
                  }
                ]
              },
              "Action": [
                "kms:CancelKeyDeletion",
                "kms:Create*",
                "kms:Decrypt",
                "kms:Delete*",
                "kms:Describe*",
                "kms:Disable*",
                "kms:Enable*",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:Get*",
                "kms:List*",
                "kms:Put*",
                "kms:ReEncryptFrom",
                "kms:ReEncryptTo",
                "kms:Revoke*",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:Update*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "DeadLetterQueueKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/dead-letter-queue-key",
        "TargetKeyId": {
          "Ref": "DeadLetterQueueKey"
        }
      }
    },
    "WorkloadsGeneralBucketKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for Workloads General Bucket",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "workloads-general-bucket-key-policy",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Data Role to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DataRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "DataUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Data Role to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "EMRServiceRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/${AWS::Region}/AWSReservedSSO_AWSAdministratorAccess_763d3671c6666008"
                  }
                ]
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable data-mapper service to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ListAliases",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/Service-Name": [
                    "data-mapper",
                    "hierarchy-plan-service"
                  ]
                }
              }
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "WorkloadsGeneralBucketKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/workloads-general-bucket-key",
        "TargetKeyId": {
          "Ref": "WorkloadsGeneralBucketKey"
        }
      }
    },
    "CdcEventProcessorBucketKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used by the cdc event processor and event processing tasks",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "cdc-event-processor-bucket-key-policy",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable the cdc processor service access to its own key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ListAliases",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": [
                    "cdc-event-processor"
                  ]
                }
              }
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/${AWS::Region}/AWSReservedSSO_AWSAdministratorAccess_763d3671c6666008"
                  }
                ]
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow access for key administrators/backups",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_NGL-Database-Administrator_eee1d98d72e43fea",
                  {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/svcCommVaultDb"
                  }
                ]
              },
              "Action": [
                "kms:CancelKeyDeletion",
                "kms:Create*",
                "kms:Decrypt",
                "kms:Delete*",
                "kms:Describe*",
                "kms:Disable*",
                "kms:Enable*",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:Get*",
                "kms:List*",
                "kms:Put*",
                "kms:ReEncryptFrom",
                "kms:ReEncryptTo",
                "kms:Revoke*",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:Update*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "CdcEventProcessorBucketKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/cdc-event-processor-bucket-key",
        "TargetKeyId": {
          "Ref": "CdcEventProcessorBucketKey"
        }
      }
    },
    "AOProcessorQueueKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used by sqs queues that hold agent info to be processed",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "ao-processor-queue-key-policy",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/${AWS::Region}/AWSReservedSSO_AWSAdministratorAccess_763d3671c6666008"
                  }
                ]
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable ao proccessors to access their own key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": [
                    "credit-check-processor",
                    "background-check-processor",
                    "state-appointment-processor",
                    "ao-state-machine"
                  ]
                }
              }
            },
            {
              "Sid": "Allow access for key administrators/backups",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_NGL-Database-Administrator_eee1d98d72e43fea",
                  {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/svcCommVaultDb"
                  }
                ]
              },
              "Action": [
                "kms:CancelKeyDeletion",
                "kms:Create*",
                "kms:Decrypt",
                "kms:Delete*",
                "kms:Describe*",
                "kms:Disable*",
                "kms:Enable*",
                "kms:Encrypt",
                "kms:GenerateDataKey",
                "kms:GenerateDataKeyPair",
                "kms:GenerateDataKeyPairWithoutPlaintext",
                "kms:GenerateDataKeyWithoutPlaintext",
                "kms:Get*",
                "kms:List*",
                "kms:Put*",
                "kms:ReEncryptFrom",
                "kms:ReEncryptTo",
                "kms:Revoke*",
                "kms:ScheduleKeyDeletion",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:Update*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "AOProcessorQueueKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/ao-processor-queue",
        "TargetKeyId": {
          "Ref": "AOProcessorQueueKey"
        }
      }
    },
    "SSOSigningKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to sign SAML XML",
        "EnableKeyRotation": false,
        "KeyUsage": "SIGN_VERIFY",
        "KeySpec": "RSA_2048",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "sso-signing-policy",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/${AWS::Region}/AWSReservedSSO_AWSAdministratorAccess_763d3671c6666008"
                  }
                ]
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable SAML API to access their own key & sign messages:wq",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*",
                "kms:ReEncrypt*",
                "kms:Sign",
                "kms:Verify",
                "kms:GetPublicKey",
                "kms:ListAliases"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": [
                    "saml-sso"
                  ]
                }
              }
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            },
            {
              "id": "F19",
              "reason": "Auto key rotation is not supported for asymmetric keys"
            }
          ]
        }
      }
    },
    "SSOSigningKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/sso-signing-key",
        "TargetKeyId": {
          "Ref": "AOProcessorQueueKey"
        }
      }
    },
    "AWCBucketKeyV1": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for AWC Bucket",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "awc-bucket-key-policyv1",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Data Role to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DataRole",
                      "Arn"
                    ]
                  },
                  {
                    "Fn::GetAtt": [
                      "DataUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "kms:RetireGrant",
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:Describe",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Users/Roles with PII Access tag to use this key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/Service-Name": [
                    "agent-api",
                    "onbase-audit-service"
                  ]
                }
              }
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "AWCBucketKeyV1Alias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/awc-bucket-key",
        "TargetKeyId": {
          "Ref": "AWCBucketKeyV1"
        }
      }
    },
    "ApplicationClusterKeyV1": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "Key to be used for Application Aurora Cluster",
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "application-cluster-key-policyv1",
          "Statement": [
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Deployment Role to Manage Keys",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "DeploymentRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Enable Services to Access S3 buckets",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "Bool": {
                  "aws:ViaAwsService": true
                }
              }
            },
            {
              "Sid": "Enable the cdc processor service access to its own key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:PrincipalTag/ServiceName": [
                    "agent-api"
                  ]
                }
              }
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "ApplicationClusterKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": "alias/application-cluster-key",
        "TargetKeyId": {
          "Ref": "ApplicationClusterKeyV1"
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F76",
              "reason": "Only principals with correct resource tag are allowed"
            }
          ]
        }
      }
    },
    "DstBaseUserGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "DstBaseUserGroup",
        "Path": "/ngl/dst/",
        "Policies": [
          {
            "PolicyName": "base-tf-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:AttachUserPolicy",
                    "iam:DeleteUserPolicy",
                    "iam:DetachUserPolicy",
                    "iam:GetUser",
                    "iam:GetUserPolicy",
                    "iam:ListAttachedUserPolicies",
                    "iam:ListGroupsForUser",
                    "iam:ListUserPolicies",
                    "iam:ListUsers",
                    "iam:PutUserPolicy",
                    "iam:UpdateUser"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:user/ngl/dst/dev-*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreateRole",
                    "iam:ListRoles",
                    "iam:GetRole",
                    "iam:DeleteRole",
                    "iam:ListRolePolicies",
                    "iam:PassRole",
                    "iam:ListPolicies",
                    "iam:AttachRolePolicy",
                    "iam:DetachRolePolicy",
                    "iam:ListInstanceProfilesForRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:TagRole"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:role/ngl/dst/dev-*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreatePolicy",
                    "iam:CreatePolicyVersion",
                    "iam:DeletePolicy",
                    "iam:DeletePolicyVersion",
                    "iam:GetPolicy",
                    "iam:GetPolicyVersion",
                    "iam:ListPolicyTags",
                    "iam:ListPolicyVersions",
                    "iam:SetDefaultPolicyVersion",
                    "iam:TagPolicy"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:policy/ngl/dst/dev-*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    "arn:aws:s3:::dev-dst-*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::dev-dst-*/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "sts:GetCallerIdentity",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ActuarialBaseUserGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "ActuarialBaseUserGroup",
        "Path": "/ngl/actuarial/",
        "Policies": [
          {
            "PolicyName": "actuarial-base-tf-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:AttachUserPolicy",
                    "iam:DeleteUserPolicy",
                    "iam:DetachUserPolicy",
                    "iam:GetUser",
                    "iam:GetUserPolicy",
                    "iam:ListAttachedUserPolicies",
                    "iam:ListGroupsForUser",
                    "iam:ListUserPolicies",
                    "iam:ListUsers",
                    "iam:PutUserPolicy",
                    "iam:UpdateUser"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:user/ngl/actuarial/dev-*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreateRole",
                    "iam:ListRoles",
                    "iam:GetRole",
                    "iam:DeleteRole",
                    "iam:ListRolePolicies",
                    "iam:PassRole",
                    "iam:ListPolicies",
                    "iam:AttachRolePolicy",
                    "iam:DetachRolePolicy",
                    "iam:ListInstanceProfilesForRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:TagRole"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:role/ngl/actuarial/dev-*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreatePolicy",
                    "iam:CreatePolicyVersion",
                    "iam:DeletePolicy",
                    "iam:DeletePolicyVersion",
                    "iam:GetPolicy",
                    "iam:GetPolicyVersion",
                    "iam:ListPolicyTags",
                    "iam:ListPolicyVersions",
                    "iam:SetDefaultPolicyVersion",
                    "iam:TagPolicy"
                  ],
                  "Resource": [
                    "arn:aws:iam::*:policy/ngl/actuarial/dev-*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    "arn:aws:s3:::dev-actuarial-*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::dev-actuarial-*/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "sts:GetCallerIdentity",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "DeploymentUserGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "DeploymentUserGroup",
        "Path": "/ngl/cicd/",
        "Policies": [
          {
            "PolicyName": "deployment-ecr-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AllowEcrPushPull",
                  "Effect": "Allow",
                  "Action": [
                    "ecr:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "dms-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "dms:*",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:dms:*:${AWS::AccountId}:*"
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "allow-code-artifact-access-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "codeartifact:*",
                    "sts:GetServiceBearerToken"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "DeploymentGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "DeploymentGroup",
        "Path": "/ngl/cicd/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AWSLambda_FullAccess",
          "arn:aws:iam::aws:policy/IAMFullAccess",
          "arn:aws:iam::aws:policy/AmazonEC2FullAccess",
          "arn:aws:iam::aws:policy/AmazonRDSFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonRedshiftFullAccess",
          "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess",
          "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator",
          "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess",
          "arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess"
        ]
      }
    },
    "DeploymentGroup2": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "DeploymentGroup2",
        "Path": "/ngl/cicd/"
      }
    },
    "DataUseGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": "DataUseGroup",
        "Policies": [
          {
            "PolicyName": "data-key-kms-use-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:RetireGrant",
                    "kms:CreateGrant",
                    "kms:Decrypt",
                    "kms:DescribeKey",
                    "kms:Encrypt",
                    "kms:GenerateDataKey*",
                    "kms:ReEncrypt*",
                    "kms:List*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonRedshiftFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        ]
      }
    },
    "CommVaultRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Role comm vault to use when doing data backups",
        "RoleName": "comm-vault-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/svcCommVaultDb"
                }
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "DataRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Role for accessing data in S3 buckets",
        "RoleName": "data-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "glue.amazonaws.com",
                  "ec2.amazonaws.com",
                  "redshift.amazonaws.com",
                  "scheduler.redshift.amazonaws.com",
                  "events.amazonaws.com",
                  "elasticmapreduce.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            },
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/data-role"
                  },
                  "arn:aws:iam::235163852221:role/data-role",
                  "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_NGL-Database-Administrator_eee1d98d72e43fea",
                  "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_DataScientist_c652b6d481d2475f",
                  "arn:aws:sts::384352530920:assumed-role/AWSReservedSSO_AWSAdministratorAccess_763d3671c6666008/epweber@nglic.com",
                  "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_NGL-Database-Administrator_eee1d98d72e43fea"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonRedshiftFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole",
          "arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess",
          "arn:aws:iam::aws:policy/AmazonEMRFullAccessPolicy_v2",
          "arn:aws:iam::aws:policy/AWSLambda_FullAccess",
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
          "arn:aws:iam::aws:policy/AmazonElasticFileSystemsUtils",
          "arn:aws:iam::aws:policy/AmazonSSMPatchAssociation",
          "arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess"
        ]
      }
    },
    "ReplicationInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "DataRole"
          }
        ]
      }
    },
    "DataRoleEc2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "InstanceProfileName": "data-role",
        "Path": "/",
        "Roles": [
          {
            "Ref": "DataRole"
          }
        ]
      }
    },
    "DeploymentRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Role for deploying resources to the cloud",
        "RoleName": "cicd-deployment-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "DeploymentUser",
                      "Arn"
                    ]
                  },
                  "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_NGL-Database-Administrator_eee1d98d72e43fea",
                  "arn:aws:iam::384352530920:user/DeploymentUserTest",
                  "arn:aws:iam::384352530920:role/aws-reserved/sso.amazonaws.com/us-east-2/AWSReservedSSO_AWSAdministratorAccess_763d3671c6666008"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AWSLambda_FullAccess",
          "arn:aws:iam::aws:policy/IAMFullAccess",
          "arn:aws:iam::aws:policy/AmazonEC2FullAccess",
          "arn:aws:iam::aws:policy/AmazonRDSFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonRedshiftFullAccess",
          "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess",
          "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator",
          "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess",
          "arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess"
        ]
      }
    },
    "DmsVpcRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Role for DMS to assume when sending records to kinesis",
        "RoleName": "dms-vpc-role",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "dms.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "EMRServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Role for EMR to assume",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "elasticmapreduce.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole",
          "arn:aws:iam::aws:policy/service-role/AmazonEMRServicePolicy_v2"
        ]
      }
    },
    "GlueServiceDataRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Role for accessing data in S3 buckets",
        "RoleName": "AWSGlueServiceRole-data-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "glue.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AmazonRedshiftFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        ]
      }
    },
    "RDSMonitoringRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Rolue used for RDS Enhanced Monitoring",
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowRdsMonitoringToAssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "monitoring.rds.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
        ]
      }
    },
    "RdsProxyRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Role granting RDS replication proxy access to the RDS replication secrets manager secret",
        "RoleName": "rds-proxy-role",
        "Policies": [
          {
            "PolicyName": "rds-proxy-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "secretsmanager:GetSecretValue",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:replication-cluster-master-password-??????"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "kms:Decrypt"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ReplicationClusterKeyV1",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "rds.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Service-Name",
            "Value": "rds-proxy"
          }
        ]
      }
    },
    "SSMBootstrapUsePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "ssm-bootstrap-use-policy",
        "Roles": [
          {
            "Ref": "DataRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ssm:DescribeParameters",
                "ssm:PutParameter",
                "ssm:GetParameters",
                "ssm:AddTagsToResource",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
                "ssm:ListTagsForResource",
                "ssm:DeleteParameter",
                "ssm:DeleteParameters"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "RDSConnectPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "rds-connect-policy",
        "Roles": [
          {
            "Ref": "DataRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "rds-db:connect",
              "Resource": {
                "Fn::Sub": "arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:*/dstrole"
              }
            }
          ]
        }
      }
    },
    "DataRoleSecretsPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DataRole"
      ],
      "Properties": {
        "PolicyName": "data-role-secrets-manager",
        "Roles": [
          {
            "Ref": "DataRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:UntagResource",
                "secretsmanager:DescribeSecret",
                "secretsmanager:DeleteResourcePolicy",
                "secretsmanager:PutSecretValue",
                "secretsmanager:CreateSecret",
                "secretsmanager:DeleteSecret",
                "secretsmanager:CancelRotateSecret",
                "secretsmanager:ListSecretVersionIds",
                "secretsmanager:UpdateSecret",
                "secretsmanager:GetRandomPassword",
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:PutResourcePolicy",
                "secretsmanager:RestoreSecret",
                "secretsmanager:RotateSecret",
                "secretsmanager:UpdateSecretVersionStage",
                "secretsmanager:ValidateResourcePolicy",
                "secretsmanager:ListSecrets",
                "secretsmanager:TagResource"
              ],
              "Resource": [
                "arn:aws:secretsmanager:us-east-2:384352530920:secret:replication-cluster-master-password-KveLPK",
                "arn:aws:secretsmanager:us-east-2:384352530920:secret:redshift-cluster-credentials-VoChtt",
                "arn:aws:secretsmanager:us-east-2:384352530920:secret:compose-emr-user-credentials-ieLxW9"
              ]
            },
            {
              "Effect": "Allow",
              "Action": "secretsmanager:GetRandomPassword",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "DataRoleAthenaPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DataRole"
      ],
      "Properties": {
        "PolicyName": "athena-data-role",
        "Roles": [
          {
            "Ref": "DataRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "athena:*",
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the data role"
            }
          ]
        }
      }
    },
    "DataRoleIamPassRolePolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DataRole"
      ],
      "Properties": {
        "PolicyName": "IamPassRole",
        "Roles": [
          {
            "Ref": "DataRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "iam:PassRole",
                "iam:GetRole"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/data-role"
                },
                {
                  "Fn::GetAtt": [
                    "EMRServiceRole",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    "DeploymentRoleSSMPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-ssm-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ssm:ListDocumentVersions",
                "ssm:ListInstanceAssociations"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ssm:*:${AWS::AccountId}:document/*"
                },
                {
                  "Fn::Sub": "arn:aws:ec2:*:${AWS::AccountId}:instance/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:DescribeParameters",
                "ssm:ListDocuments",
                "ssm:ListAssociations",
                "ssm:DescribeInstanceInformation",
                "ssm:DescribeInstanceProperties"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:AddTagsToResource",
                "ssm:RemoveTagsFromResource",
                "ssm:DescribeDocument",
                "ssm:GetParameterHistory",
                "ssm:DescribeDocumentParameters",
                "ssm:GetDocument",
                "ssm:DescribeDocumentPermission",
                "ssm:GetParametersByPath",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:PutParameter",
                "ssm:DeleteParameter",
                "ssm:UpdateDocumentDefaultVersion",
                "ssm:CreateAssociation",
                "ssm:UpdateDocument",
                "ssm:UpdateAssociation",
                "ssm:DeleteDocument",
                "ssm:CreateDocument",
                "ssm:DeleteParameters",
                "ssm:DeleteAssociation",
                "ssm:UpdateInstanceAssociationStatus"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ssm:*:${AWS::AccountId}:association/*"
                },
                {
                  "Fn::Sub": "arn:aws:ssm:*:${AWS::AccountId}:document/*"
                },
                {
                  "Fn::Sub": "arn:aws:ssm:*:${AWS::AccountId}:parameter/*"
                },
                {
                  "Fn::Sub": "arn:aws:ec2:*:${AWS::AccountId}:instance/*"
                },
                {
                  "Fn::Sub": "arn:aws:ssm:*:${AWS::AccountId}:managed-instance/*"
                },
                {
                  "Fn::Sub": "arn:aws:ssm:*:${AWS::AccountId}:maintenancewindow/*"
                }
              ]
            }
          ]
        }
      }
    },
    "DeploymentRoleSNSPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-sns-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "DeploymentRoleSQSPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-sqs-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sqs:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "DeploymentRoleCloudFrontPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-cloudfront-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudfront:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "DeploymentRoleCognitoPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-cognito-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "DeploymentRoleStepFunctionsPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-step-functions-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "states:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:states:*:${AWS::AccountId}:activity:*"
                },
                {
                  "Fn::Sub": "arn:aws:states:*:${AWS::AccountId}:execution:*:*"
                },
                {
                  "Fn::Sub": "arn:aws:states:*:${AWS::AccountId}:stateMachine:*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "states:SendTaskSuccess",
                "states:ListStateMachines",
                "states:SendTaskFailure",
                "states:ListActivities",
                "states:SendTaskHeartbeat"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "DeploymentRoleStsPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-security-token-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:GetSessionToken",
                "sts:GetAccessKeyInfo",
                "sts:GetCallerIdentity",
                "sts:GetServiceBearerToken"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole",
                "sts:GetFederationToken"
              ],
              "Resource": "arn:aws:iam::454229460814:role/codeartifact-read-only"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "DeploymentRoleGlueDbPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-glue-db-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "glue:Create*",
                "glue:Update*",
                "glue:Get*",
                "glue:List*",
                "glue:TagResource",
                "glue:UntagResource",
                "glue:DeleteDatabase",
                "glue:StopCrawler",
                "glue:DeleteConnection",
                "glue:DeleteCrawler",
                "glue:StartCrawler",
                "glue:BatchGetCrawlers",
                "glue:DeleteJob",
                "glue:DeleteTrigger",
                "glue:DeleteWorkflow"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "DeploymentRoleWafV2Policy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-wafv2-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "wafv2:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "DeploymentRoleCodebuildPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "deploy-codebuild-policy",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codebuild:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4"
            }
          ]
        }
      }
    },
    "DeploymentRoleEventBridgePolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "event-bridge-cicd",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "events:Create*",
                "events:DeactivateEventSource",
                "events:DeauthorizeConnection",
                "events:Delete*",
                "events:Describe*",
                "events:EnableRule",
                "events:List*",
                "events:Put*",
                "events:TagResource",
                "events:UntagResource",
                "events:Update*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:events:*:${AWS::AccountId}:*"
                }
              ]
            }
          ]
        }
      }
    },
    "DeploymentRoleSecretsPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "secrets-manager-cicd",
        "Groups": [
          {
            "Ref": "DeploymentGroup"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:CancelRotateSecret",
                "secretsmanager:CreateSecret",
                "secretsmanager:Delete*",
                "secretsmanager:DescribeSecret",
                "secretsmanager:Get*",
                "secretsmanager:ListSecrets",
                "secretsmanager:Put*",
                "secretsmanager:RemoveRegionsFromReplicaiton",
                "secretsmanager:ReplicateSecretToRegions",
                "secretsmanager:RestoreSecret",
                "secretsmanager:RotateSecret",
                "secretsmanager:StopReplicationToReplica",
                "secretsmanager:TagResource",
                "secretsmanager:UntagResource",
                "secretsmanager:Update*",
                "secretsmanager:ValidateResourcePolicy"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": "secretsmanager:GetRandomPassword",
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*"
                }
              ]
            }
          ]
        }
      }
    },
    "DeploymentRoleAppConfigPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup2",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "appconfig-cicd",
        "Groups": [
          {
            "Ref": "DeploymentGroup2"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "appconfig:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:appconfig:*:${AWS::AccountId}:*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:ListDocumentVersions",
                "ssm:DescribeDocument",
                "ssm:UpdateDocumentDefaultVersion",
                "ssm:CreateDocument",
                "ssm:UpdateDocumentMetadata",
                "ssm:ModifyDocumentPermission",
                "ssm:DescribeDocumentParameters",
                "ssm:GetDocument",
                "ssm:DescribeDocumentPermission",
                "ssm:UpdateDocument",
                "ssm:DeleteDocument"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ssm:*:${AWS::AccountId}:document/*"
                },
                {
                  "Fn::Sub": "arn:aws:ssm:*:${AWS::AccountId}:parameter/*"
                }
              ]
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4"
            }
          ]
        }
      }
    },
    "DeploymentRoleCodeArtifactPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup2",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "codeartifact-cicd",
        "Groups": [
          {
            "Ref": "DeploymentGroup2"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Action": [
              "codeartifact:*"
            ],
            "Resource": [
              {
                "Fn::Sub": "arn:aws:codeartifact:*:${AWS::AccountId}:*"
              }
            ]
          }
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4"
            }
          ]
        }
      }
    },
    "DeploymentRoleKmsPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup2",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "kms-cicd",
        "Groups": [
          {
            "Ref": "DeploymentGroup2"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "kms:Create*",
                "kms:Enable*",
                "kms:Describe*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowKmsKeyUseInAllNglWorkloadsAccounts",
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": [
                "arn:aws:kms:us-east-2:384352530920:key/*",
                "arn:aws:kms:us-east-2:454229460814:key/*",
                "arn:aws:kms:us-east-2:235163852221:key/*"
              ]
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4"
            }
          ]
        }
      }
    },
    "DeploymentRoleLogsPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentGroup2",
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "cloudwatch-logs-cicd",
        "Groups": [
          {
            "Ref": "DeploymentGroup2"
          }
        ],
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Action": [
              "logs:Create*",
              "logs:Delete*",
              "logs:Describe*",
              "logs:Get*",
              "logs:List*",
              "logs:Put*",
              "logs:StartMetricStreams",
              "logs:StopMetricStreams",
              "logs:TagResource",
              "logs:UntagResource"
            ],
            "Resource": {
              "Fn::Sub": "arn:aws:logs:*:${AWS::AccountId}:*"
            }
          }
        }
      }
    },
    "DeploymentRoleAcmPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "acm-cicd",
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "acm:AddTagsToCertificate",
                "acm:DeleteCertificate",
                "acm:DescribeCertificate",
                "acm:ExportCertificate",
                "acm:Get*",
                "acm:ImportCertificate",
                "acm:List*",
                "acm:RemoveTagsFromCertificate",
                "acm:RenewCertificate",
                "acm:RequestCertificate",
                "acm:ResendValidationEmail",
                "acm:UpdateCertificateOptions"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:acm:*:${AWS::AccountId}:certificate/*"
                }
              ]
            }
          ]
        }
      }
    },
    "DeploymentRoleAthenaPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "athena-cicd",
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "athena:*",
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "DeploymentRoleEcrPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "ecr-cicd",
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ecr:Batch*",
                "ecr:CompleteLayerUpload",
                "ecr:CreateRepository",
                "ecr:Delete*",
                "ecr:Describe*",
                "ecr:Get*",
                "ecr:InitiateLayerUpload",
                "ecr:Put*",
                "ecr:ListImages",
                "ecr:ListTagsForResource",
                "ecr:ReplicateImage",
                "ecr:SetRepositoryPolicy",
                "ecr:StartImageScan",
                "ecr:StartLifecyclePolicyPreview",
                "ecr:TagResource",
                "ecr:UntagResource",
                "ecr:UploadLayerPart"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ecr:us-east-2:${AWS::AccountId}:repository/*"
                }
              ]
            }
          ]
        }
      }
    },
    "DeploymentRoleEksPolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": [
        "DeploymentRole"
      ],
      "Properties": {
        "PolicyName": "eks-cicd",
        "Roles": [
          {
            "Ref": "DeploymentRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "eks:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:eks:us-east-2:${AWS::AccountId}:cluster/*"
                },
                {
                  "Fn::Sub": "arn:aws:eks:us-east-2:${AWS::AccountId}:nodegroup/*"
                },
                {
                  "Fn::Sub": "arn:aws:eks:us-east-2:${AWS::AccountId}:addon/*"
                },
                {
                  "Fn::Sub": "arn:aws:eks:us-east-2:${AWS::AccountId}:fargateprofile/*"
                },
                {
                  "Fn::Sub": "arn:aws:eks:us-east-2:${AWS::AccountId}:identityproviderconfig/*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "eks:List*",
                "eks:Describe*",
                "eks:Untag*",
                "eks:Tag*",
                "eks:CreateCluster",
                "eks:RegisterCluster"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This is a policy for the deployment role"
            }
          ]
        }
      }
    },
    "KMSEMRServiceRoleUsePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "kms-emr-use-policy",
        "Roles": [
          {
            "Ref": "EMRServiceRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "kms:CreateGrant",
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:GenerateDataKey*",
                "kms:ReEncrypt*"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "WorkloadsGeneralBucketKey",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    },
    "DataUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "DataUser",
        "Groups": [
          {
            "Ref": "DataUseGroup"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F2000",
              "reason": "Permissions are only granted to user via roles"
            }
          ]
        }
      }
    },
    "DeploymentUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "DeploymentUser",
        "Groups": [
          {
            "Ref": "DeploymentUserGroup"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F2000",
              "reason": "Permissions are only granted to user via roles"
            },
            {
              "id": "F10",
              "reason": "Need inline policy on deployment user for special case in bitbucket deployment"
            }
          ]
        }
      }
    },
    "DstBaseInfraTFBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-dst-base-infra-tf",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "Project",
            "Value": "core"
          },
          {
            "Key": "Service-Name",
            "Value": "infrastructure-master"
          }
        ]
      }
    },
    "DstDataServiceTFBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-dst-data-service-tf",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "Project",
            "Value": "core"
          },
          {
            "Key": "Service-Name",
            "Value": "infrastructure-master"
          }
        ]
      }
    },
    "DstAwsQemTFBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-dst-aws-qem-tf",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "Project",
            "Value": "core"
          },
          {
            "Key": "Service-Name",
            "Value": "infrastructure-master"
          }
        ]
      }
    },
    "DstAwsQuicksightArchTFBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-dst-quicksight-arch-tf",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "Project",
            "Value": "core"
          },
          {
            "Key": "Service-Name",
            "Value": "infrastructure-master"
          }
        ]
      }
    },
    "ActuarialImportProcessTFBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-actuarial-import-process-tf",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "Project",
            "Value": "core"
          },
          {
            "Key": "Service-Name",
            "Value": "infrastructure-master"
          }
        ]
      }
    },
    "DSTJiraAnalyticsTFBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "dev-dst-jira-analytics-tf",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true,
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": "dev"
          },
          {
            "Key": "Project",
            "Value": "core"
          },
          {
            "Key": "Service-Name",
            "Value": "infrastructure-master"
          }
        ]
      }
    },
    "DstBaseInfraTFUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "dev-dst-base_infra_tf-user",
        "Path": "/ngl/dst/",
        "Groups": [
          {
            "Ref": "DstBaseUserGroup"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F2000",
              "reason": "Permissions are only granted to user via roles"
            }
          ]
        }
      }
    },
    "DstDataServiceTFUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "dev-dst-data_service_tf-user",
        "Path": "/ngl/dst/",
        "Groups": [
          {
            "Ref": "DstBaseUserGroup"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F2000",
              "reason": "Permissions are only granted to user via roles"
            }
          ]
        }
      }
    },
    "DstAwsQemTriggerTFUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "dev-dst-aws_qem_trigger_tf-user",
        "Path": "/ngl/dst/",
        "Groups": [
          {
            "Ref": "DstBaseUserGroup"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F2000",
              "reason": "Permissions are only granted to user via roles"
            }
          ]
        }
      }
    },
    "DstAwsQuicksightArchTFUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "dev-dst-aws-quicksight_arch_tf-user",
        "Path": "/ngl/dst/",
        "Groups": [
          {
            "Ref": "DstBaseUserGroup"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F2000",
              "reason": "Permissions are only granted to user via roles"
            }
          ]
        }
      }
    },
    "ActuarialImportProcessTFUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "dev-actuarial-import_process_tf-user",
        "Path": "/ngl/actuarial/",
        "Groups": [
          {
            "Ref": "ActuarialBaseUserGroup"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F2000",
              "reason": "Permissions are only granted to user via roles"
            }
          ]
        }
      }
    },
    "DstJiraAnalyticsTFUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "dev-dst-jira_analytics_tf-user",
        "Path": "/ngl/dst/",
        "Groups": [
          {
            "Ref": "DstBaseUserGroup"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F2000",
              "reason": "Permissions are only granted to user via roles"
            }
          ]
        }
      }
    },
    "ActuarialFileUploaderUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "UserName": "dev-actuarial-file_uploader-user",
        "Path": "/ngl/actuarial/"
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F2000",
              "reason": "Permissions are only granted to user via roles"
            }
          ]
        }
      }
    },
    "FileUploaderRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Description": "Role for uploading files to actuarial process",
        "RoleName": "dev-actuarial-file_uploader",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "ActuarialFileUploaderUser",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "S3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "s3-actuarial-file-uploader-policy",
        "Roles": [
          {
            "Ref": "FileUploaderRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetBucketAcl",
                "s3:GetBucketTagging",
                "s3:GetBucketVersioning"
              ],
              "Resource": [
                "arn:aws:s3:::dev-vlxodata-external-data"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionAcl",
                "s3:PutObjectVersionTagging"
              ],
              "Resource": [
                "arn:aws:s3:::dev-vlxodata-external-data/*"
              ]
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "ngl-384352530920-us-east-2-dev-deployments",
      "Export": {
        "Name": "sls-infrastructure-master-dev-ServerlessDeploymentBucketName"
      }
    },
    "LifeProBucketKeyAlias": {
      "Description": "Alias of the lifepro bucket key",
      "Value": {
        "Ref": "LifeProBucketKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LifeProBucketKeyAlias"
        }
      }
    },
    "LifeProBucketKeyARNV1": {
      "Description": "ARN of LifePro Bucket Key",
      "Value": {
        "Fn::GetAtt": [
          "LifeProBucketKeyV1",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LifeProBucketKeyArnV1"
        }
      }
    },
    "LifeProBucketKeyId": {
      "Description": "Id of the LifePro bucket key",
      "Value": {
        "Ref": "LifeProBucketKeyV1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LifeProBucketKeyId"
        }
      }
    },
    "ID3BucketKeyAlias": {
      "Description": "Alias of the ID3 bucket key",
      "Value": {
        "Ref": "ID3BucketKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ID3BucketKeyAlias"
        }
      }
    },
    "ID3BucketKeyARNV1": {
      "Description": "ARN of ID3 Bucket Key",
      "Value": {
        "Fn::GetAtt": [
          "ID3BucketKeyV1",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ID3BucketKeyArnV1"
        }
      }
    },
    "ID3BucketKeyId": {
      "Description": "Id of the ID3 bucket key",
      "Value": {
        "Ref": "ID3BucketKeyV1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ID3BucketKeyId"
        }
      }
    },
    "OnBaseBucketKeyAlias": {
      "Description": "Alias of the OnBase bucket key",
      "Value": {
        "Ref": "OnBaseBucketKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-OnBaseBucketKeyAlias"
        }
      }
    },
    "OnBaseBucketKeyARNV1": {
      "Description": "ARN of ID3 Bucket Key",
      "Value": {
        "Fn::GetAtt": [
          "OnBaseBucketKeyV1",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-OnBaseBucketKeyArnV1"
        }
      }
    },
    "OnBaseBucketKeyId": {
      "Description": "Id of the OnBase bucket key",
      "Value": {
        "Ref": "OnBaseBucketKeyV1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-OnBaseBucketKeyId"
        }
      }
    },
    "ReplicationClusterKeyIdV1": {
      "Description": "Id of the Replication DB key",
      "Value": {
        "Ref": "ReplicationClusterKeyV1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ReplicationClusterKeyIdV1"
        }
      }
    },
    "ReplicationClusterKeyAlias": {
      "Description": "Alias of the Replication DB key",
      "Value": {
        "Ref": "ReplicationClusterKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ReplicationClusterKeyAlias"
        }
      }
    },
    "ReplicationClusterKeyARNV1": {
      "Description": "ARN of Replication DB Key",
      "Value": {
        "Fn::GetAtt": [
          "ReplicationClusterKeyV1",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ReplicationClusterKeyArnV1"
        }
      }
    },
    "RedshiftKeyAlias": {
      "Description": "Alias of the Redshift key",
      "Value": {
        "Ref": "RedshiftKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-RedshiftKeyAlias"
        }
      }
    },
    "RedshiftKeyARN": {
      "Description": "ARN of Redshift Key",
      "Value": {
        "Fn::GetAtt": [
          "RedshiftKey",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-RedshiftKeyArn"
        }
      }
    },
    "PolicyPdfBucketKeyAlias": {
      "Description": "Alias of the Policy PDF Key",
      "Value": {
        "Ref": "PolicyPdfBucketKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PolicyPdfBucketKeyAlias"
        }
      }
    },
    "PolicyPdfBucketKeyARNV1": {
      "Description": "ARN of PolicyPdfBucekt Key",
      "Value": {
        "Fn::GetAtt": [
          "PolicyPdfBucketKeyV1",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-PolicyPdfBucketKeyArnV1"
        }
      }
    },
    "DeadLetterQueueKeyAlias": {
      "Description": "Alias of the Dead Letter Queue Key",
      "Value": {
        "Ref": "DeadLetterQueueKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DeadLetterQueueKeyAlias"
        }
      }
    },
    "DeadLetterQueueKeyARN": {
      "Description": "ARN of DeadLetterQueue Key",
      "Value": {
        "Fn::GetAtt": [
          "DeadLetterQueueKey",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DeadLetterQueueKeyArn"
        }
      }
    },
    "WorkloadsGeneralBucketKeyAlias": {
      "Description": "Alias of the Workloads General bucket key",
      "Value": {
        "Ref": "WorkloadsGeneralBucketKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-WorkloadsGeneralBucketKeyAlias"
        }
      }
    },
    "WorkloadsGeneralBucketKeyARN": {
      "Description": "ARN of Workloads General Bucket Key",
      "Value": {
        "Fn::GetAtt": [
          "WorkloadsGeneralBucketKey",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-WorkloadsGeneralBucketKeyArn"
        }
      }
    },
    "WorkloadsGeneralBucketKeyId": {
      "Description": "Id of the Workloads General bucket key",
      "Value": {
        "Ref": "WorkloadsGeneralBucketKey"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-WorkloadsGeneralBucketKeyId"
        }
      }
    },
    "CdcEventProcessorBucketKeyARN": {
      "Description": "ARN of CDC EventProcessor Bucket Key",
      "Value": {
        "Fn::GetAtt": [
          "CdcEventProcessorBucketKey",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-CdcEventProcessorBucketKeyArn"
        }
      }
    },
    "CdcEventProcessorBucketKeyId": {
      "Description": "Id of CDC EventProcessor Bucket Key",
      "Value": {
        "Ref": "CdcEventProcessorBucketKey"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-CdcEventProcessorBucketKeyId"
        }
      }
    },
    "AOProcessorQueueKeyARN": {
      "Description": "ARN of AO processor queue key",
      "Value": {
        "Fn::GetAtt": [
          "AOProcessorQueueKey",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AOProcessorQueueKeyARN"
        }
      }
    },
    "AOProcessorQueueKeyId": {
      "Description": "Id of AO processor queue key",
      "Value": {
        "Ref": "AOProcessorQueueKey"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AOProcessorQueueKeyId"
        }
      }
    },
    "ETLPipelinesKeyId": {
      "Description": "Id of the etl pipelines key",
      "Value": {
        "Ref": "ETLPipelinesKey"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ETLPipelinesKeyId"
        }
      }
    },
    "ETLPipelinesKeyAlias": {
      "Description": "Alias of the ETL Pipelines key",
      "Value": {
        "Ref": "ETLPipelinesKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ETLPipelinesKeyAlias"
        }
      }
    },
    "ETLPipelinesKeyArn": {
      "Description": "ARN of ETL Pipelines Key",
      "Value": {
        "Fn::GetAtt": [
          "ETLPipelinesKey",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ETLPipelinesKeyArn"
        }
      }
    },
    "SSOSigningKeyId": {
      "Description": "ARN of Key to sign sso xml",
      "Value": {
        "Ref": "SSOSigningKey"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SSOSigningKeyId"
        }
      }
    },
    "SSOSigningKeyAlias": {
      "Description": "ARN of Key to sign sso xml",
      "Value": {
        "Ref": "SSOSigningKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SSOSigningKeyAlias"
        }
      }
    },
    "SSOSigningKeyArn": {
      "Description": "ARN of Key to sign sso xml",
      "Value": {
        "Fn::GetAtt": [
          "SSOSigningKey",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-SSOSigningKeyArn"
        }
      }
    },
    "AWCBucketKeyV1Id": {
      "Description": "Id of AWC KMS key",
      "Value": {
        "Ref": "AWCBucketKeyV1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AWCBucketKeyV1Id"
        }
      }
    },
    "AWCBucketKeyV1Alias": {
      "Description": "ARN of alias use for AWC KMS key",
      "Value": {
        "Ref": "AWCBucketKeyV1Alias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AWCBucketKeyV1Alias"
        }
      }
    },
    "AWCBucketKeyV1Arn": {
      "Description": "ARN of AWC KMS key",
      "Value": {
        "Fn::GetAtt": [
          "AWCBucketKeyV1",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AWCBucketKeyV1Arn"
        }
      }
    },
    "ApplicationClusterKeyAlias": {
      "Description": "Alias of the Application DB key",
      "Value": {
        "Ref": "ApplicationClusterKeyAlias"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ApplicationClusterKeyAlias"
        }
      }
    },
    "ApplicationClusterKeyARNV1": {
      "Description": "ARN of Application DB Key",
      "Value": {
        "Fn::GetAtt": [
          "ApplicationClusterKeyV1",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ApplicationClusterKeyArnV1"
        }
      }
    },
    "ApplicationClusterKeyIdV1": {
      "Description": "Id of the Application DB key",
      "Value": {
        "Ref": "ApplicationClusterKeyV1"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ApplicationClusterKeyIdV1"
        }
      }
    },
    "DataRoleArn": {
      "Description": "The data role arn",
      "Value": {
        "Fn::GetAtt": [
          "DataRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DataRoleArn"
        }
      }
    },
    "DataRoleEc2InstanceProfileName": {
      "Description": "The instance profile name used by the EMR cluster",
      "Value": {
        "Ref": "DataRoleEc2InstanceProfile"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DataRoleEc2InstanceProfile"
        }
      }
    },
    "ReplicateInstanceProfileArn": {
      "Description": "The instance profile used by the replicate server",
      "Value": {
        "Fn::GetAtt": [
          "ReplicationInstanceProfile",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ReplicationInstanceProfileArn"
        }
      }
    },
    "ReplicateInstanceProfileName": {
      "Description": "The instance profile name used by the replicate server",
      "Value": {
        "Ref": "ReplicationInstanceProfile"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ReplicationInstanceProfileName"
        }
      }
    },
    "DeploymentRoleArn": {
      "Description": "The deployment role arn",
      "Value": {
        "Fn::GetAtt": [
          "DeploymentRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DeploymentRoleArn"
        }
      }
    },
    "DeploymentRoleId": {
      "Description": "The deployment role id",
      "Value": {
        "Fn::GetAtt": [
          "DeploymentRole",
          "RoleId"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DeploymentRoleId"
        }
      }
    },
    "NglRootIamPath": {
      "Description": "Root path for all NGL IAM resources",
      "Value": "/ngl/",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-NglRootIamPath"
        }
      }
    },
    "DmsVpcRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "DmsVpcRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DmsVpcRoleArn"
        }
      }
    },
    "DmsVpcRoleName": {
      "Description": "The emr service role name",
      "Value": {
        "Ref": "DmsVpcRole"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DmsVpcRoleName"
        }
      }
    },
    "EMRServiceRoleName": {
      "Description": "The emr service role name",
      "Value": {
        "Ref": "EMRServiceRole"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-EMRServiceRoleName"
        }
      }
    },
    "GlueServiceDataRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "GlueServiceDataRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-GlueServiceDataRoleArn"
        }
      }
    },
    "RDSMonitoringRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "RDSMonitoringRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-RDSMonitoringRoleArn"
        }
      }
    },
    "ProxyRoleArn": {
      "Description": "Replication proxy role arn",
      "Value": {
        "Fn::GetAtt": [
          "RdsProxyRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-RdsProxyRoleArn"
        }
      }
    },
    "DeploymentUserArn": {
      "Description": "The deployment user arn",
      "Value": {
        "Fn::GetAtt": [
          "DeploymentUser",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DeploymentUserArn"
        }
      }
    },
    "FileUploaderRoleArn": {
      "Description": "The file uploader role arn",
      "Value": {
        "Fn::GetAtt": [
          "FileUploaderRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-FileUploaderRoleArn"
        }
      }
    },
    "FileUploaderRoleId": {
      "Description": "The file uploader role id",
      "Value": {
        "Fn::GetAtt": [
          "FileUploaderRole",
          "RoleId"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-FileUploaderRoleId"
        }
      }
    }
  },
  "Conditions": {
    "ProductionEnvironment": {
      "Fn::Equals": [
        {
          "Fn::Sub": "${AWS::AccountId}"
        },
        235163852221
      ]
    },
    "NonProductionEnvironment": {
      "Fn::Not": [
        {
          "Condition": "ProductionEnvironment"
        }
      ]
    },
    "DevelopmentEnvironment": {
      "Fn::Equals": [
        {
          "Fn::Sub": "${AWS::AccountId}"
        },
        384352530920
      ]
    },
    "NonDevelopmentEnvironment": {
      "Fn::Not": [
        {
          "Condition": "DevelopmentEnvironment"
        }
      ]
    },
    "QAEnvironment": {
      "Fn::Equals": [
        {
          "Fn::Sub": "${AWS::AccountId}"
        },
        454229460814
      ]
    },
    "NonQAEnvironment": {
      "Fn::Not": [
        {
          "Condition": "QAEnvironment"
        }
      ]
    }
  }
}
