AWSTemplateFormatVersion: 2010-09-09
Description: NGL-AAE2-IP-VSA01 CloudFormation template to deploy a VPC with two private subnets spread across two Availability Zones. Also to create an auto scaling group and application load balancer.

Resources:
  myssmdocument:                      ##ssm domain join document
    Type: AWS::SSM::Document
    Properties:
      #SDocumentType: Automation
      Content:
        schemaVersion: "1.2"
        description: Join instances to an AWS Directory Service domain.
        parameters:
          directoryId:
            type: String
            description: (Required) The ID of the AWS Directory Service directory.
          directoryName:
            type: String
            description: (Required) The name of the directory; for example, test.example.com
          dnsIpAddresses:
            type: StringList
            default: []
            description: (Optional) The IP addresses of the DNS servers in the directory. Required when DHCP is not configured. Learn more at http://docs.aws.amazon.com/directoryservice/latest/simple-ad/join_get_dns_addresses.html
            allowedPattern: ((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
        runtimeConfig:
          aws:domainJoin:
            properties:
              directoryId: '{{ directoryId }}'
              directoryName: '{{ directoryName }}'
              dnsIpAddresses: '{{ dnsIpAddresses }}'
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: myEC2Role
      Description: Instance role to attach to your EC2 instance
      Tags:
        - Key: Name
          Value: myEC2Role
        - Key: Environment
          Value: !Ref EnvironmentScpTag
        - Key: Project
          Value: infrastructure-tools
        - Key: Service-Name
          Value: infrastructure
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - !Sub "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy"
        #- !Sub "arn:aws:iam::aws:policy/AWSDirectoryServiceFullAccess"
        - !Sub "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
  EC2InstanceRolePolicy:
    DependsOn: EC2InstanceRole
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: ec2role_policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject*"
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
            Resource:
              - !Sub 'arn:aws:s3:::${bucketname}/'
              - !Sub 'arn:aws:s3:::${bucketname}/*'
          # - Effect: Allow
          #   Action:
          #     - "ec2:*"
          #   Resource: "*"
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStreams"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - "ssm:StartAutomationExecution" 
              - "ssm:GetAutomationExecution" 
              - "ssm:StopAutomationExecution"
              - "ssm:ListDocuments" 
              - "ssm:GetDocument" 
              - "ssm:DescribeDocument" 
              - "ssm:SendCommand"
              - "ssm:ListCommandInvocations"
              - "ssm:CancelCommand" 
            Resource: "*"
          - Effect: Allow
            Action:
              - "ssm:CreateOpsItem" # Create OpsItems for incidents
              - "ssm:UpdateOpsItem" # Update OpsItems
              - "ssm:DescribeOpsItems" # Retrieve OpsItems details
              - "ssm:GetOpsSummary" # Retrieve a summary of OpsItems
              - "ssm:StartIncidentManagerEngagement" # Engage Incident Manager workflows
            Resource: "*"
          - Effect: Allow
            Action:
              - "cloudwatch:DescribeAlarms" # Get details of alarms
              - "cloudwatch:GetMetricData" # Retrieve metric data
            Resource: "*"
          - Effect: Allow
            Action:
              - "ssm:StartAutomationExecution"
              - "ssm:GetAutomationExecution"
            Resource: "*"
          - Effect: Allow
            Action:
              - "ssm:CreateOpsItem"
              - "ssm:UpdateOpsItem"
              - "ssm:DescribeOpsItems"
              - "cloudwatch:DescribeAlarms"
              - "cloudwatch:GetMetricData"
            Resource: "*"
      Roles:
        - !Ref EC2InstanceRole
  EC2InstanceProfile:
    DependsOn: EC2InstanceRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ec2instanceprofile
      Path: "/"
      Roles:
        - !Ref EC2InstanceRole
  EC2Instance:
    DependsOn:
      - WebAppSecurityGroup
      - EC2InstanceRole
    Type: AWS::EC2::Instance
    Condition: IsGeneric
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2InstanceLaunchTemplateTest
        Version: !GetAtt Ec2InstanceLaunchTemplateTest.LatestVersionNumber
      AvailabilityZone: !Ref AvailabilityZone
      SubnetId:
        Ref: VpcEc2Subnet1
      KeyName:
        Ref: Ec2InstanceKeyName
      #ImageId: !Ref Ec2ImageId
      #ImageId: !Ref LatestWindowsAmiId
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref EnvironmentType, InstanceType]
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      EbsOptimized: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      PropagateTagsToVolumeOnCreation: true        ####extend instance tags to root volume

  # SSM Association to Apply the Domain Join Document
  SSMDomainJoinAssociation:
    Type: AWS::SSM::Association
    Condition: IsGeneric
    Properties:
      Name: !Ref myssmdocument
      Targets:
      - Key: InstanceIds
        Values:
          - !Ref EC2Instance              ################verify with Ec2Instance
      Parameters:
        directoryId:
          - !Ref ADDirectoryId
        directoryName:
          - !Ref ADDirectoryName
        dnsIpAddresses:
          - !Ref ADDnsIpAddress1
          - !Ref ADDnsIpAddress2
      AssociationName: DomainJoinAssociation
      #AutomationTargetParameterName: InstanceId
      MaxConcurrency: "1"
      MaxErrors: "0"
      ComplianceSeverity: CRITICAL
    DependsOn:
      - myssmdocument
      - EC2Instance
  #############################
  
  EC2InstanceAutoRecovery: ###### instance recovery for 1dp over a minute StatusCheckFailed_System to recover or reboot ec2.
    Type: AWS::CloudWatch::Alarm
    Condition: IsGeneric
    Properties:
      AlarmName: EC2AutoRecoveryAlarm
      AlarmDescription: Automatically recover EC2 instance on failure
      MetricName: StatusCheckFailed_System
      Namespace: AWS/EC2
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [webapp-security-group, !Ref EnvironmentType]]
      GroupDescription: 'Allow HTTP/HTTPS and SSH inbound and outbound traffic'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} WebAppSecurityGroup"
        - Key: Project
          Value: infrastructure-tools
        - Key: Environment
          Value: !Ref EnvironmentScpTag
        - Key: Service-Name
          Value: infrastructure
  ####
  Ec2InstanceLaunchTemplateTest:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 00_setupCfnHup
            - 01_CfnHup_service
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          setup_custom_cloudwatch_security-installs:
            - 00_setupCfnHup
            - 01_CfnHup_service
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - 04_download_crowdstrike_config_script
            - 05_download_rapid7_config_script
            - 06_download_syxsense_config_script
            #- 07_run_crowdstrike_config_script
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent

        00_setupCfnHup:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            c:\cfn\hooks.d\amazon-cloudwatch-agent-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=cfn-init.exe -v --stack ${AWS::StackId} --resource Ec2InstanceLaunchTemplateTest --region ${AWS::Region} --configsets UpdateEnvironment
        01_CfnHup_service:
          services:
            windows:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf

        02_config-amazon-cloudwatch-agent:
          files:
            "C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\dummy.version":
              content: |
                "You can change the VERSION below to to simulate the update of metadata"
                "VERSION=1.0"

        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
            02_start_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json -s"

        04_download_crowdstrike_config_script:            
          commands:
            downloadscript:
              command: !Sub |
                powershell -Command "read-s3object -BucketName ${bucketname} -Key scripts/CROWDSTRIKE.EXE -File C:\\Scripts\\CROWDSTRIKE.EXE"
        05_download_rapid7_config_script:            
          commands:
            downloadscript:
              command: !Sub |
                powershell -Command "read-s3object -BucketName ${bucketname} -Key scripts/RAPID7_X86_64.MSI -File C:\\Scripts\\RAPID7_X86_64.MSI"
        06_download_syxsense_config_script:            
          commands:
            downloadscript:
              command: !Sub |
                powershell -Command "read-s3object -BucketName ${bucketname} -Key scripts/SYXSENSE_RESPONDERSETUP461.MSI -File C:\\Scripts\\SYXSENSE_RESPONDERSETUP461.MSI"
        # 07_run_crowdstrike_config_script:            
        #   commands:
        #     runscript: 
        #       command: !Sub |
        #         powershell -Command "C:\\Scripts\\CROWDSTRIKE.EXE -bucketname ${CrowdStrikebucketname} -SecretName ${CrowdStrikeSecretName} -Debug ${CrowdStrikeDebug}"
    Properties:
      LaunchTemplateName: NGL-AAE2-IP-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref Ec2ImageId
        #ImageId: !Ref LatestWindowsAmiId
        UserData:
          'Fn::Base64': !Sub |
            <script>
            powershell -Command "C:\'Program Files'\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c ssm:${SSMKey} -s"
            cfn-init.exe -v --stack ${AWS::StackId} --resource Ec2InstanceLaunchTemplate --region ${AWS::Region} --configsets default
            powershell -Command "Start-Sleep -Seconds 30"
            cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource AutoScalingGroup --region ${AWS::Region}
            </script>
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref 'Ec2InstanceTagName'
              - Key: Project
                Value: infrastructure-tools
              - Key: Backup
                Value: true
              - Key: Service-Name
                Value: infrastructure
              - Key: Environment
                Value: !Ref EnvironmentScpTag
              - Key: OS
                Value: !Ref OSType
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Ref 'Ec2InstanceTagName'
              - Key: Backup
                Value: true
              - Key: Project
                Value: infrastructure-tools
              - Key: Environment
                Value: !Ref EnvironmentScpTag
              - Key: Service-Name
                Value: infrastructure
        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 1    
######################
  Ec2InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition: IsCluster
    DeletionPolicy: Delete
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 00_setupCfnHup
            - 01_CfnHup_service
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          setup_custom_cloudwatch_security-installs:
            - 00_setupCfnHup
            - 01_CfnHup_service
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
            - 04_download_crowdstrike_config_script
            - 05_download_rapid7_config_script
            - 06_download_syxsense_config_script
            #- 07_run_crowdstrike_config_script
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent

        00_setupCfnHup:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            c:\cfn\hooks.d\amazon-cloudwatch-agent-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.AutoScalingGroup.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=cfn-init.exe -v --stack ${AWS::StackId} --resource Ec2InstanceLaunchTemplate --region ${AWS::Region} --configsets UpdateEnvironment
        01_CfnHup_service:
          services:
            windows:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf

        02_config-amazon-cloudwatch-agent:
          files:
            "C:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\dummy.version":
              content: |
                "You can change the VERSION below to to simulate the update of metadata"
                "VERSION=1.0"

        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a stop"
            02_start_service:
              command: !Sub |
                powershell -Command "C:\\'Program Files'\\Amazon\\AmazonCloudWatchAgent\\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c ssm:${SSMKey} -s"

        04_download_crowdstrike_config_script:            
          commands:
            downloadscript:
              command: !Sub |
                powershell -Command "read-s3object -BucketName ${bucketname} -Key scripts/CROWDSTRIKE.EXE -File C:\\Scripts\\CROWDSTRIKE.EXE"
        05_download_rapid7_config_script:            
          commands:
            downloadscript:
              command: !Sub |
                powershell -Command "read-s3object -BucketName ${bucketname} -Key scripts/RAPID7_X86_64.MSI -File C:\\Scripts\\RAPID7_X86_64.MSI"
        06_download_syxsense_config_script:            
          commands:
            downloadscript:
              command: !Sub |
                powershell -Command "read-s3object -BucketName ${bucketname} -Key scripts/SYXSENSE_RESPONDERSETUP461.MSI -File C:\\Scripts\\SYXSENSE_RESPONDERSETUP461.MSI"
        # 07_run_crowdstrike_config_script:            
        #   commands:
        #     runscript: 
        #       command: !Sub |
        #         powershell -Command "C:\\Scripts\\CROWDSTRIKE.EXE -bucketname ${CrowdStrikebucketname} -SecretName ${CrowdStrikeSecretName} -Debug ${CrowdStrikeDebug}"        
    Properties:
      LaunchTemplateName: NGL-AAE2-IP-VSA01AutoScaling
      LaunchTemplateData:
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Ref 'Ec2InstanceTagName'
              - Key: Project
                Value: infrastructure-tools
              - Key: Backup
                Value: true
              - Key: Service-Name
                Value: infrastructure
              - Key: Environment
                Value: !Ref EnvironmentScpTag
              - Key: OS
                Value: !Ref OSType
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Ref 'Ec2InstanceTagName'
              - Key: Backup
                Value: true
              - Key: Project
                Value: infrastructure-tools
              - Key: Environment
                Value: !Ref EnvironmentScpTag
              - Key: Service-Name
                Value: infrastructure
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        InstanceInitiatedShutdownBehavior: terminate
        KeyName: !Ref 'Ec2InstanceKeyName'
        InstanceType: !Ref 'Ec2InstanceType'
        MetadataOptions:
          HttpTokens: required
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 1
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false
            Groups:
              - !Ref 'WebAppSecurityGroup'
        ImageId: !Ref Ec2ImageId
        #ImageId: !Ref LatestWindowsAmiId
        UserData:
          'Fn::Base64': !Sub |
            <script>
            powershell -Command "C:\'Program Files'\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c ssm:${SSMKey} -s"
            cfn-init.exe -v --stack ${AWS::StackId} --resource Ec2InstanceLaunchTemplate --region ${AWS::Region} --configsets default
            powershell -Command "Start-Sleep -Seconds 30"
            cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource AutoScalingGroup --region ${AWS::Region}
            </script>
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: IsCluster
    DeletionPolicy: Delete
    CreationPolicy:                    #####
      ResourceSignal:
        Count: !Ref Ec2AutoscaleDesiredCapacity
        Timeout: PT30M    
    UpdatePolicy:
      AutoScalingRollingUpdate:
        # NOTE: changed Max=1 Min=1 PauseTime=15M
        MaxBatchSize: 1
        MinInstancesInService: 0
        MinSuccessfulInstancesPercent: 100
        PauseTime: PT30M
        SuspendProcesses:
          - AlarmNotification
          - AZRebalance
          - HealthCheck
          - ReplaceUnhealthy
          - ScheduledActions
        WaitOnResourceSignals: true 
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2InstanceLaunchTemplate
        Version: !GetAtt Ec2InstanceLaunchTemplate.LatestVersionNumber
      MinSize: !Ref 'Ec2AutoscaleMinSize'
      MaxSize: !Ref 'Ec2AutoscaleMaxSize'
      DesiredCapacity: !Ref 'Ec2AutoscaleDesiredCapacity'
      HealthCheckType: EC2      ##ELB
      HealthCheckGracePeriod: 900
      VPCZoneIdentifier:
        - !Ref 'VpcEc2Subnet1'
        - !Ref 'VpcEc2Subnet2'
      TargetGroupARNs:
        - !Ref ALBTargetGroups
      TerminationPolicies:
        - OldestLaunchConfiguration  ###
        - OldestInstance
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DomainJoin'
          PropagateAtLaunch: true
        - Key: Project
          Value: infrastructure-tools
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref 'EnvironmentScpTag'
          PropagateAtLaunch: true
        - Key: Backup
          Value: true
          PropagateAtLaunch: true
        - Key: Service-Name
          Value: infrastructure
          PropagateAtLaunch: true
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsCluster
    DeletionPolicy: Delete
    Properties:
      GroupName: NGL-AAE2-IP-VSA01-CloudFormation-sg
      GroupDescription: Allow SSH and HTTP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Allow SSH HTTP
        - Key: Project
          Value: infrastructure-tools
        - Key: Environment
          Value: !Ref 'EnvironmentScpTag'
        - Key: Backup
          Value: true
        - Key: Service-Name
          Value: infrastructure
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsCluster
    DeletionPolicy: Delete
    Properties:
      GroupName: NGL-AAE2-IP-VSA01-CloudFormation-alb-sg
      GroupDescription: Allow SSH and HTTP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Allow SSH HTTP
        - Key: Project
          Value: infrastructure-tools
        - Key: Environment
          Value: !Ref 'EnvironmentScpTag'
        - Key: Backup
          Value: true
        - Key: Service-Name
          Value: infrastructure
  cpuUsage:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: IsCluster
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60
  ScalingPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Condition: IsCluster
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      ScalingAdjustment: '1'
  CloudWatchAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: IsCluster
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '80'
      AlarmDescription: Alarm if CPU higher than 80%
      Period: '60'
      AlarmActions:
        - !Ref ScalingPolicy
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  ALBTargetGroups:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: IsCluster
    Properties:
      VpcId: !Ref VpcId
      #TargetType: instance
      #HealthCheckPath: /index.html
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 5
      #HealthCheckPort: ""
      UnhealthyThresholdCount: 5
      Tags:
        - Key: Name
          Value: NGL-AAE2-IP-VSA01CloudFormationTG
        - Key: Project
          Value: infrastructure-tools
        - Key: Environment
          Value: !Ref 'EnvironmentName'
        - Key: Backup
          Value: true
        - Key: Service-Name
          Value: infrastructure
  ASGALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: IsCluster
    Properties:
      Type: application
      #Scheme: internet-facing
      Scheme: internal     ###in case of no IGW
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      Subnets:
        - !Ref 'VpcEc2Subnet1'
        - !Ref 'VpcEc2Subnet2'
      Tags:
        - Key: Name
          Value: NGL-AAE2-IP-VSA01CloudFormationALB
        - Key: Project
          Value: infrastructure-tools
        - Key: Environment
          Value: !Ref 'EnvironmentScpTag'
        - Key: Backup
          Value: true
        - Key: Service-Name
          Value: infrastructure
  ASGALBlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: IsCluster
    Properties:
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroups
      LoadBalancerArn: !Ref ASGALB
  FileSystem:
    Type: AWS::EFS::FileSystem
    Condition: IsClusterAndLinux
    Properties:
      Encrypted: !Ref Encryption
      FileSystemTags:
        - Key: Name
          Value: !If [hasFsTags, !Ref FileSystemName, !Sub "${AWS::StackName}FileSystem"]
        - Key: Environment
          Value: !Ref EnvironmentScpTag
        - Key: Project
          Value: infrastructure-tools
        - Key: Service-Name
          Value: infrastructure
        - Key: Backup
          Value: true
      KmsKeyId: !If [useDefaultCMK, !Ref "AWS::NoValue", !Ref KmsKeyId]
      PerformanceMode: !Ref PerformanceMode
      ThroughputMode: !Ref ThroughputMode
      ProvisionedThroughputInMibps: !If [provisionedThroughputMode, !Ref ProvisionedThroughputInMibps, !Ref 'AWS::NoValue']
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Condition: IsClusterAndLinux
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref VpcEc2Subnet1
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
  MountTarget2:
    Condition: IsClusterAndLinux
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Ref VpcEc2Subnet2
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsClusterAndLinux
    Properties:
      GroupDescription: FileSystem Security Group
      VpcId: !Ref VpcId
      GroupName: !If [hasFsTags, !Join ["", [!Ref FileSystemName, "SecurityGroup"]], !Join ["", [!Ref "AWS::StackName", "FileSystemSecurityGroup"]]]
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: !Ref FileSharePort
          ToPort: !Ref FileSharePort
          SourceSecurityGroupId: !Ref WebAppSecurityGroup
  # FSx for Windows AMI
  # FSxFileSystem:
  #   Type: AWS::FSx::FileSystem
  #   Condition: !And [IsCluster, IsWindows]
  #   Properties:
  #     FileSystemType: WINDOWS
  #     StorageCapacity: 300
  #     SubnetIds:
  #       - !Ref VpcEc2Subnet1
  #       - !Ref VpcEc2Subnet2
  #     WindowsConfiguration:
  #     ThroughputCapacity: 16
  #     #ActiveDirectoryId: !Ref ActiveDirectoryId
  ################# MORE ALERTS
  ##CPU Utilization
  snstopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Ref warningsns
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email
  CriticalsSnsTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Ref criticalsns
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email
  CPUAlarmWARNING: ###CPU of 90% for 1 dp over 15 mins
    Type: AWS::CloudWatch::Alarm
    DeletionPolicy: Retain
    Condition: IsGeneric
    Properties:
      AlarmDescription: !Sub "${instancename} - ${EC2Instance} - High CPU Usage 70%"
      AlarmActions:
        - Ref: CriticalsSnsTopic
      OKActions:
        - Ref: snstopic
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '70'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
  MemoryAlarmCRITICAL:
    Type: AWS::CloudWatch::Alarm
    Condition: IsGeneric
    Properties:
      AlarmDescription: !Sub "${instancename} - ${EC2Instance} - High Memory Usage 90%"
      AlarmActions:
        - Ref: CriticalsSnsTopic
      OKActions:
        - Ref: snstopic
      MetricName: "mem_used_percent"
      Namespace: CWAgent
      Statistic: Average
      Period: '900'
      EvaluationPeriods: '1'
      Threshold: '90'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
  InstanceStatusAlarmCRITICAL: ###########StatusCheckFailed_Instance > 0 for 3 datapoints within 3 minutes
    Type: AWS::CloudWatch::Alarm
    Condition: IsGeneric
    Properties:
      AlarmDescription: !Sub "${instancename} - ${EC2Instance} - Instance Status Check Failed for the last two minutes, server should likely be unreachable"
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_Instance
      Statistic: Minimum
      Period: '120'
      EvaluationPeriods: '3'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - Ref: CriticalsSnsTopic
      OKActions:
        - Ref: snstopic
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
  DiskSpaceAlarmCRITICAL:
    Type: AWS::CloudWatch::Alarm
    Condition: IsGeneric
    Properties:
      AlarmDescription: !Sub "${instancename} - ${EC2Instance} - over 95% of ${volume} volume space is in use"
      AlarmActions:
        - Ref: CriticalsSnsTopic
      OKActions:
        - Ref: snstopic
      MetricName: "disk_used_percent"
      Namespace: CWAgent
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '95'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
        - Name: device
          Value: !Ref volume
        - Name: path
          Value: !Ref path
        - Name: fstype
          Value: !Ref fstype
  MemoryBytesAlarmWARNING:
    Type: AWS::CloudWatch::Alarm
    Condition: IsGeneric
    Properties:
      AlarmDescription: !Sub "${instancename} - ${EC2Instance} - High Memory Usage 90%"
      AlarmActions:
        - Ref: CriticalsSnsTopic
      OKActions:
        - Ref: snstopic
      MetricName: "Memory % Committed Bytes In Use"
      Namespace: CWAgent
      Statistic: Average
      Period: '900'
      EvaluationPeriods: '1'
      Threshold: '90'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
        - Name: objectname
          Value: Memory
  SystemStatusAlertCRITICAL: ###status check(StatusCheckFailed_System) 2dp over 2 mins
    Type: AWS::CloudWatch::Alarm
    Condition: IsGeneric
    Properties:
      AlarmDescription: !Sub "${instancename} - ${EC2Instance} - instance recovery process has been triggered because of failed System Status Check"
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '2'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
        - Ref: CriticalsSnsTopic
      OKActions:
        - Ref: snstopic
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
  InstanceStatusAlarmReboot: ####### StatusCheckFailed_Instance > 0 for 3 datapoints within 3 minutes
    Type: AWS::CloudWatch::Alarm
    Condition: IsGeneric
    Properties:
      AlarmDescription: !Sub "${instancename} - ${EC2Instance} - Instance Status Check Failed - please investigate. Troubleshooting: https://goo.gl/Ea27Gd"
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_Instance
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '3'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - Ref: CriticalsSnsTopic
      OKActions:
        - Ref: snstopic
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
  DiskSpaceWARNING:
    Type: AWS::CloudWatch::Alarm
    Condition: IsGeneric
    Properties:
      AlarmDescription: !Sub "${instancename} - ${EC2Instance} - over 90% of ${volume} Drive space is in use"
      AlarmActions:
        - Ref: CriticalsSnsTopic
      OKActions:
        - Ref: snstopic
      MetricName: "LogicalDisk % Free Space"
      Namespace: CWAgent
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '10'
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance
        - Name: instance
          Value: !Ref volume
        - Name: objectname
          Value: LogicalDisk
######################## ASG DOMAIN JOIN
  ASGSSMDomainJoinAssociation:
    Type: AWS::SSM::Association
    Condition: IsCluster
    Properties:
      Name: !Ref myssmdocument
      Targets:
      - Key: tag:Name
        Values:
          - !Sub '${EnvironmentName}-DomainJoin'
      Parameters:
        directoryId:
          - !Ref ADDirectoryId
        directoryName:
          - !Ref ADDirectoryName
        dnsIpAddresses:
          - !Ref ADDnsIpAddress1
          - !Ref ADDnsIpAddress2
      AssociationName: DomainJoinAssociation
      MaxConcurrency: "1"
      MaxErrors: "0"
      ComplianceSeverity: CRITICAL
    DependsOn:
      - myssmdocument
      - Ec2InstanceLaunchTemplate
Outputs:
  WebAppSecurityGroupId:
    Description: Security Group ID for the web application
    Value: !Ref WebAppSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-WebAppSecurityGroupId"
  AutoScalingGroupName:
    Condition: IsCluster
    Description: AutoScaling Group name
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-AutoScalingGroupName"
  LoadBalancerDNS:
    Condition: IsCluster
    Description: DNS name of the Load Balancer
    Value: !GetAtt ASGALB.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-LoadBalancerDNS"
  LaunchTemplateId:
    Condition: IsCluster
    Description: The ID of the Launch Template
    Value: !Ref Ec2InstanceLaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-LaunchTemplateId"
  FileSystemId:
    Condition: IsClusterAndLinux
    Description: The ID of the EFS FileSystem
    Value: !Ref FileSystem
    Export:
      Name: !Sub "${AWS::StackName}-FileSystemId"
  # CriticalAlertsSnsTopicArn:
  #   Description: The ARN of the SNS topic for critical alerts
  #   Value: !Ref CriticalsSnsTopic
  #   Export:
  #     Name: !Sub "${AWS::StackName}-CriticalAlertsSnsTopicArn"
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    Condition: IsGeneric
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"
