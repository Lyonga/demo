AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: IsCluster
    DeletionPolicy: Delete
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref Ec2InstanceLaunchTemplate
        Version: !GetAtt Ec2InstanceLaunchTemplate.LatestVersionNumber
      MinSize: !Ref 'Ec2AutoscaleMinSize'
      MaxSize: !Ref 'Ec2AutoscaleMaxSize'
      DesiredCapacity: !Ref 'Ec2AutoscaleDesiredCapacity'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !Ref 'VpcEc2Subnet1'
        - !Ref 'VpcEc2Subnet2'
      TargetGroupARNs:
        - !Ref ALBTargetGroups
      LaunchConfigurationName:
        Ref: Ec2InstanceLaunchTemplate
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Allow SSH HTTP
        - Key: Project
          Value: infrastructure-tools
        - Key: Environment
          Value: !Ref 'EnvironmentScpTag'
        - Key: Backup
          Value: true
        - Key: Service-Name
          Value: infrastructure



        UserData:
  'Fn::Base64': !Sub |
    <script>
    # Create a directory and download the CloudWatch agent MSI
    mkdir C:\Downloads\Amazon\AmazonCloudWatchAgent
    powershell -Command "(New-Object Net.WebClient).DownloadFile('https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi','C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi')"
    C:\Downloads\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.msi

    # Run cfn-init to apply CloudWatch agent configuration and other init steps
    cfn-init.exe -v --stack ${AWS::StackId} --resource Ec2InstanceLaunchTemplate --region ${AWS::Region} --configsets default

    # Now install IIS after CloudWatch agent setup is done
    powershell -Command "Install-WindowsFeature -Name Web-Server -IncludeManagementTools"

    # Create a simple health check page for ALB
    powershell -Command "\"Healthy\" | Out-File -FilePath C:\inetpub\wwwroot\index.html -Encoding utf8"

    # Start the web service
    powershell -Command "Start-Service W3SVC"

    # Signal CloudFormation that instance setup is complete
    cfn-signal.exe -e %errorlevel% --stack ${AWS::StackId} --resource AutoScalingGroup --region ${AWS::Region}
    </script>



Resources:
  myssmdocument:                      ##ssm domain join document
    Type: AWS::SSM::Document
    Properties:
      #SDocumentType: Automation
      Content:
        schemaVersion: "1.2"
        description: Join instances to an AWS Directory Service domain.
        parameters:
          directoryId:
            type: String
            description: (Required) The ID of the AWS Directory Service directory.
          directoryName:
            type: String
            description: (Required) The name of the directory; for example, test.example.com
          dnsIpAddresses:
            type: StringList
            default: []
            description: (Optional) The IP addresses of the DNS servers in the directory. Required when DHCP is not configured. Learn more at http://docs.aws.amazon.com/directoryservice/latest/simple-ad/join_get_dns_addresses.html
            allowedPattern: ((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
        runtimeConfig:
          aws:domainJoin:
            properties:
              directoryId: '{{ directoryId }}'
              directoryName: '{{ directoryName }}'
              dnsIpAddresses: '{{ dnsIpAddresses }}'
    ASGSSMDomainJoinAssociation:
    Type: AWS::SSM::Association
    Condition: IsCluster
    Properties:
      Name: !Ref myssmdocument
      Targets:
      - Key: InstanceIds
        Values:
          - !Ref Ec2InstanceLaunchTemplate
      Parameters:
        directoryId:
          - !Ref ADDirectoryId
        directoryName:
          - !Ref ADDirectoryName
        dnsIpAddresses:
          - !Ref ADDnsIpAddress1
          - !Ref ADDnsIpAddress2
      AssociationName: DomainJoinAssociation
      #AutomationTargetParameterName: InstanceId
      MaxConcurrency: "1"
      MaxErrors: "0"
      ComplianceSeverity: CRITICAL
    DependsOn:
      - myssmdocument
      - Ec2InstanceLaunchTemplate



Resource handler returned message: "Invalid request provided: Invalid InstanceId format: lt-0c8cc23f319c4b0e9 (Service: Ssm, Status Code: 400, Request ID: 7c8259a4-8062-4b2a-b5fc-228c2f7c02cf)" (RequestToken: 4e323da0-78cb-ae30-207b-303208d34c24, HandlerErrorCode: InvalidRequest)

Properties validation failed for resource AutoScalingGroup with message: #/Tags/0: required key [PropagateAtLaunch] not found #/Tags/1: required key [PropagateAtLaunch] not found #/Tags/2: required key [PropagateAtLaunch] not found #/Tags/3: required key [PropagateAtLaunch] not found #/Tags/4: required key [PropagateAtLaunch] not found


Resource handler returned message: "Valid requests must contain either LaunchTemplate, LaunchConfigurationName, InstanceId or MixedInstancesPolicy parameter. (Service: AutoScaling, Status Code: 400, Request ID: 264d34a7-6cd1-4d7e-96fa-d3ff6978ebba)" (RequestToken: a535831d-8477-d980-e37e-c41fe4f3e068, HandlerErrorCode: InvalidRequest)





2022-03-30T19:07:28Z I! [logagent] starting
2022-03-30T19:07:28Z I! [processors.ec2tagger] ec2tagger: EC2 tagger has started initialization.
2022-03-30T19:07:28Z I! cloudwatch: get unique roll up list []
2022-03-30T19:07:28Z I! cloudwatch: publish with ForceFlushInterval: 1m0s, Publish Jitter: 54s
2022-03-30T19:07:28Z I! [processors.ec2tagger] ec2tagger: Initial retrieval of tags succeded
2022-03-30T19:07:28Z I! [processors.ec2tagger] ec2tagger: EC2 tagger has started, finished initial retrieval of tags and Volumes
2022-03-30T19:34:31Z I! Profiler is stopped during shutdown
2022-03-30T19:34:31Z I! [agent] Hang on, flushing any cached metrics before shutdown
2024/12/17 20:46:52 I! 2024/12/17 20:46:52 E! ec2metadata is not available
I! Detected the instance is OnPrem
2024/12/17 20:46:52 Reading json config file path: C:\ProgramData\Amazon\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json ...
C:\ProgramData\Amazon\AmazonCloudWatchAgent\\amazon-cloudwatch-agent.json does not exist or cannot read. Skipping it.
2024/12/17 20:46:52 Reading json config file path: C:\ProgramData\Amazon\AmazonCloudWatchAgent\Configs\default ...

UserData:
  Fn::Base64: !Sub |
    <powershell>
    # Ensure the directory for the config exists
    if (!(Test-Path "C:\ProgramData\Amazon\AmazonCloudWatchAgent")) {
      New-Item -ItemType Directory -Path "C:\ProgramData\Amazon\AmazonCloudWatchAgent" | Out-Null
    }

    # Write the CloudWatch Agent configuration file
    $cwConfig = @"
    {
      "metrics": {
        "metrics_collected": {
          "mem": {
            "measurement": ["mem_used_percent"]
          }
        }
      }
    }
    "@

    $cwConfigPath = "C:\ProgramData\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent.json"
    $cwConfig | Out-File -FilePath $cwConfigPath -Encoding UTF8 -Force

    # Install and run the CloudWatch Agent if not already done
    # (If you've already done this step above, you can skip re-installing)
    if (!(Test-Path "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1")) {
      (New-Object Net.WebClient).DownloadFile(
        "https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi",
        "C:\Temp\amazon-cloudwatch-agent.msi"
      )
      msiexec.exe /i "C:\Temp\amazon-cloudwatch-agent.msi" /qn /norestart
    }

    # Fetch and start the agent with the new config
    "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -c file:$cwConfigPath -s
    </powershell>



