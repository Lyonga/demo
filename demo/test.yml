Below is a **sample SCP** (Service Control Policy) that **does not** lock you into one particular AMI, yet **enforces** some best‐practice requirements for new EC2 instances. Common examples include:

1. **Forcing IMDSv2** (metadata options = `httpTokens = required`).  
2. **Requiring encryption for all EBS volumes**.  
3. **Ensuring an IAM instance profile is always attached** (for example, to manage instances with SSM).  
4. **Optionally requiring certain tags**.

You can adapt or expand on these checks depending on your organization’s needs. This approach **doesn’t** restrict you to a single AMI, so you (or other teams) can still use different images (including BYOL or other custom AMIs) as long as they meet the guardrails.

---

## 1. Example SCP JSON

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "EnforceEC2HardenedBestPractices",
      "Effect": "Deny",
      "Action": "ec2:RunInstances",
      "Resource": "*",
      "Condition": {
        "StringNotEqualsIfExists": {
          // 1) Force IMDSv2: block if the request is not "ec2:MetadataHttpTokens"=required
          "ec2:MetadataHttpTokens": "required",
          
          // 2) Require an instance profile (SSM or otherwise). Adjust the ARN or
          //    use a wildcard if you only want to ensure *some* profile is present:
          //    "ec2:InstanceProfile": "arn:aws:iam::*:instance-profile/*"
          // If you want to enforce a *specific* profile, specify its exact ARN(s).
          "ec2:InstanceProfile": [
            "arn:aws:iam::*:instance-profile/YourRequiredProfileName"
          ]
        },
        "BoolNotEqualsIfExists": {
          // 3) Enforce EBS encryption
          // This ensures that any new instance's EBS volumes must be encrypted.
          "ec2:Encrypted": "true"
        }
      }
    }
  ]
}
```

### Explanation

1. **`ec2:MetadataHttpTokens = "required"`**  
   - Forces the use of **IMDSv2** for instance metadata, which improves security by disallowing IMDSv1 requests.

2. **`ec2:InstanceProfile`**  
   - Ensures that **some** IAM instance profile is attached. In this example, it specifically requires the ARN to match `arn:aws:iam::*:instance-profile/YourRequiredProfileName`.  
   - If you just want to ensure **any** instance profile is present, you can do something like:
     ```json
     "StringNotEqualsIfExists": {
       "ec2:InstanceProfile": ""
     }
     ```
     but that’s trickier to handle because you want to “deny if profile is empty.” A more direct approach is to **allow** if the profile matches certain patterns or is non-empty.

3. **`ec2:Encrypted = "true"`**  
   - Enforces that all new EBS volumes attached to the instance must be encrypted.  
   - This includes the root volume. It does **not** specifically control ephemeral (instance store) volumes.  
   - If your org requires ephemeral store volumes to be avoided or your OS to handle encryption differently, that’s a separate discussion.

4. **No Single AMI Restriction**  
   - Because we haven’t used any condition referencing `"ec2:ImageId"`, you’re not forced to a single AMI. You can use a variety of images, including BYOL or partner AMIs.

5. **Mandatory Tags (Optional)**  
   - If you want to require certain tags, you can add conditions like:
     ```json
     "ForAnyValue:StringEquals": {
       "aws:TagKeys": [ "Owner", "Environment" ]
     }
     ```
     or
     ```json
     "StringNotEqualsIfExists": {
       "aws:RequestTag/CostCenter": "YOUR_VALUE"
     }
     ```
   - This ensures a particular tag is set, but the exact syntax depends on your tagging strategy.

---

## 2. How to Attach the SCP

1. **In AWS Organizations** console (or CLI), create a new SCP with the JSON above.  
2. **Attach** it to the organizational unit (OU) or account where you want to enforce these rules.  
3. **Test** in a sandbox or dev account to confirm the deny logic works as intended:
   - Attempt to launch an instance **without** an instance profile → should be denied.  
   - Attempt to launch an instance with IMDSv1 (`ec2:MetadataHttpTokens` not set to `required`) → denied.  
   - Attempt to launch an instance with unencrypted EBS volumes → denied.

---

## 3. Limitations

1. **Cannot Enforce SSM Docs or User Data**  
   - SCPs can’t directly enforce that a particular user data script is used or that certain SSM documents are run. AWS does not expose those fields as condition keys.  
2. **Optional vs. Strict**  
   - If you only want to *warn* or *detect* issues (instead of blocking them), you might pair an **AWS Config rule** with a remediation or detection approach.  
3. **Scope**  
   - An SCP applies **org-wide** (or at least OU-level). Make sure your pipeline or authorized admins use the required settings, or they’ll get blocked too.

---

## 4. Summary

- **No Hardcoded AMI**: This policy does **not** restrict images, so teams can bring their own OS or BYOL.  
- **Forces Key Security Postures**:  
  - IMDSv2 (metadata v2)  
  - EBS encryption  
  - An instance profile for SSM or other monitoring tools.  
- **Additional Checks**: You could also require specific tags, specific instance types, or expanded encryption coverage.  

With this kind of SCP, you give your teams **flexibility** (any AMI) while still enforcing the critical baseline: secure metadata, encryption, and an IAM profile for management.
